/* 
	Module KBaseInferelator version 1.0
	This module provides a set of methods for work with cMonkey biclustering tool.
	
	Data types summary
	Input data types: 
	ExpressionDataSeries represents a list of expression data samples that serve as an input of cMonkey.
	ExpressionDataSample data type represents a sample of expression data for a single condition.
	ExpressionDataPoint data type represents a relative expression value for a single gene.
	CmonkeyRun data type represents data generated by a single run of cMonkey (run_infos table of cMonkey results)
	CmonkeyNetwork data type represents bicluster network
	CmonkeyCluter data type represents a single bicluster from cMonkey network, with links to genes, experimental conditions and motifs
	CmonkeyMotif data type represents a single motif identifed for a bicluster

	Output data types:

	Methods summary
	find_interactions_with_inferelator - Starts Inferelator server run for a list of regulatory genes, series of expression data and CmonkeyRunResult stored in workspace and returns job ID of the run
*/

module Inferelator
{
	/* Represents KBase gene identifier
		@id kb
	*/
	typedef string gene_id;

	/* Represents a list of gene ids
		string id - workspace name of the list
		list <gene_id> genes; - list of gene ids 
	*/
	typedef structure{
		string id;
		list <gene_id> genes;
	} GeneList;

	/* Represents a particular data point from gene expression data set
		gene_id gene - KBase gene identifier
		float expression_value - relative expression value 
	*/
	typedef structure{
		gene_id gene;
		float expression_value;
	} ExpressionDataPoint;
	
	/* ExpressionDataSample represents set of expression data
		string id - identifier of data set
		string description - description of data set`
		list<ExpressionDataPoint> points - data points
	*/
	typedef structure{
		string id;
		string description;
		list<ExpressionDataPoint> points;
	} ExpressionDataSample;

	/* ExpressionDataSeries represents collection of expression data samples
		string id - identifier of the collection
		list<ExpressionDataSample> samples - data sets
	*/
	typedef structure{
		string id;
		list<ExpressionDataSample> samples;
	} ExpressionDataSeries;

	/*	Represents a particular MAST hit
		string sequence_id - name of sequence
		string strand - strand ("+" or "-")
		string pssm_id - name of motif from cmonkey-python output
		int hit_start - start position of hit
		int hit_end - end position of hit
		float score - hit score
		float hit_pvalue - hit p-value
	*/
	typedef structure{
		string sequence_id;
		string strand;
		string pssm_id;
		int hit_start;
		int hit_end;
		float score;
		float hit_pvalue;
	} MastHit;

	/*	Represents a single row of PSSM
		int rowNumber - number of PSSM row
		float aWeight 
		float cWeight
		float gWeight
		float tWeight
	*/
	typedef structure{
		int row_number;
		float a_weight;
		float c_weight;
		float g_weight;
		float t_weight;
	} PssmRow;

	/* Represents a particular site from MEME motif description 
		string source_sequence_id - ID of sequence where the site was found
		int start - position of site start 
		float pvalue - site P-value
		string left_flank - sequence of left flank
		string sequence - sequence of site
		string right_flank - sequence of right flank
	*/
	typedef structure {
		string source_sequence_id;
		int start;
		float pvalue;
		string left_flank;
		string right_flank;
		string sequence;
	} SiteMeme;

	/* Represents motif generated by cMonkey with a list of hits in upstream sequences
		string CmonkeyMotifId - identifier of MotifCmonkey
		string seqType - type of sequence
		int pssm_id - number of motif
		float evalue - motif e-value
		list<PssmRow> pssm - PSSM 
		list<HitMast> hits - hits (motif annotations)
		list<SiteMeme> sites - training set
	*/
	typedef structure{
		string id;
		string seq_type;
		int pssm_id;
		float evalue;
		list<list<float>> pssm_rows;
		list<MastHit> hits;
		list<SiteMeme> sites;
	} CmonkeyMotif;

	/* Represents bicluster generated by cMonkey
		string id - identifier of bicluster
		float residual - residual
		list<string> dataset_ids - list of experimental conditions 
		list<gene_id> gene_ids - list of genes from bicluster
		list<CmonkeyMotif> motifs - list of motifs identified for the bicluster, converted to MEME format
	*/
	typedef structure{
		string id;
		float residual;
		list<string> dataset_ids;
		list<gene_id> gene_ids;
		list<CmonkeyMotif> motifs;
	} CmonkeyCluster;
	
	/* Represents network generated by a single run of cMonkey
		string id - identifier of cMonkey-generated network
		int iteration - number of the last iteration
		list<CmonkeyCluster> clusters - list of biclusters
	*/
	typedef structure{
		string id;
		int iteration;
		list<CmonkeyCluster> clusters;
	} CmonkeyNetwork;

	/* Contains parameters of a cMonkey run
		int no_operons = <0|1> - if 1, MicrobesOnline operons data will not be used
		int no_string = <0|1> - if 1, STRING data will not be used
		int no_networks = <0|1> - if 1, Network scoring will not be used
		int no_motifs = <0|1> - if 1, Motif scoring will not be used
	*/
	typedef structure{
		int no_operons;
		int no_string;
		int no_networks;
		int no_motifs;
	} CmonkeyRunParameters;
	
	/* Represents data from a single run of cMonkey
		string id - identifier of cMonkey run
		string start_time - start time of cMonkey run
		string finish_time - end time of cMonkey run
		int iterations_number - number of iterations
		int last_iteration - last iteration
		string organism - organism
		int rows_number - number of rows
		int columns_number - number of columns
		int clusters_number - number of clusters
		CmonkeyRunParameters parameters - run parameters
		CmonkeyNetwork network;
	*/
	typedef structure{
		string id;
		string start_time;
		string finish_time;
		int iterations_number;
		int last_iteration;
		string organism;
		int rows_number;
		int columns_number;
		int clusters_number;
		CmonkeyRunParameters parameters;
		CmonkeyNetwork network;
	} CmonkeyRunResult;

	/* Contains parameters of Inferelator run
		string gene_list_id - id of transcription factor ids list
		string cmonkey_run_result_id - id of cMonkey run result
		string expression_data_series_id - id of expression data series
	*/
	typedef structure{
		string gene_list_id;
		string cmonkey_run_result_id;
		string expression_data_series_id;
	} InferelatorRunParameters;

	/* Represents a interaction found Inferelator
		gene_id regulator_id - kbase id of regulatory gene
		double coeff - coefficient
	*/
	typedef structure{
		gene_id regulator_id;
		float coeff;
	} InferelatorInteraction;

	/* Represents a interaction found Inferelator
		string id - identifier of InferelatorCluster
		list <InferelatorInteraction> interactions
	*/
	typedef structure{
		string id;
		list <InferelatorInteraction> interactions;		
	} InferelatorCluster;

	/* Represents data from a single run of Inferelator
		string id - identifier of cMonkey run
		string cmonkey_run_result_id - kbase id of input CmonkeyRunResult
		string series_id - kbase id of expression data series
		string organism - organism name
		list <InferelatorCluster> clusters
	*/
	typedef structure{
		string id;
		string cmonkey_run_result_id;
		string series_id;
		string organism;
		list <InferelatorCluster> clusters;
	} InferelatorRunResult;
		

	/*	Starts cMonkey server run for a series of expression data stored in workspace and returns ID of the run result object
		string ws_id - workspace id
		InferelatorRunParameters params - run parameters 
		string inferelator_run_job_id - identifier of cMonkey job
	*/
	funcdef find_interactions_with_inferelator(string ws_id, InferelatorRunParameters params) returns(string inferelator_run_job_id) authentication required;		
};
